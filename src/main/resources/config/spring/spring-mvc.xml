<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
  xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
  xsi:schemaLocation="
  http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
  http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd  
  http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
  http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
  http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd"
  default-lazy-init="true">
  <!-- 启用spring mvc 注解 -->
  <context:annotation-config />
  
  <!-- 设置使用注解的类所在的jar包 -->
  <context:component-scan base-package="com.mathew">
  </context:component-scan>
  <!-- 
  <context:component-scan base-package="com.sf.tuxiaoer.web" use-default-filters="false">
    <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller" />
  </context:component-scan>
   -->
  
  <!-- 应用属性文件读入 -->
  <bean id="applicationProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
    <property name="ignoreResourceNotFound" value="true" />
    <property name="locations">
      <list>
        <!-- 标准配置 -->
        <!-- <value>classpath:/config/config.properties</value> -->
        <value>classpath:/config/jdbc.properties</value>
      </list>
    </property>
  </bean>
  <!-- PropertyPlaceholderConfigurer,用于spring ${placeholder}的解析 -->
  <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
    <property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
    <property name="properties" ref="applicationProperties" />
  </bean>
  <!-- 用于持有applicationProperties,将properties转变为静态方法使用,PropertiesHolder.getProperty("somekey") -->
  <bean class="com.mathew.cofigutil.PropertiesHolder" lazy-init="false">
    <property name="properties" ref="applicationProperties" />
  </bean>
  
  <!-- 对某些静态资源，如css,图片等进行过滤 ,有引用 "/resources/**" 的路径引用转到工程的/resources/目录取资源 -->
  <mvc:resources mapping="/decorators/**" location="/decorators/" />
  <mvc:resources mapping="/dwr/**" location="/dwr/" />
  <mvc:resources mapping="/favicon.ico" location="/favicon.ico"/>
  
  <mvc:resources mapping="/bootstrapAdmin/**" location="/bootstrapAdmin/" />
  <mvc:resources mapping="/include/**" location="/include/" />
  <mvc:resources mapping="/resources/**" location="/resources/" />
  <mvc:resources mapping="/reverseajax/**" location="/reverseajax/"/>
  <mvc:resources mapping="/test.jar**" location="/test.jar"/>
  <mvc:resources mapping="/donglai/**" location="/donglai/"/>
  <mvc:resources mapping="/banner/**" location="/banner/"/>
  <mvc:resources mapping="/FCKeditor/**" location="/FCKeditor/"/>
  <mvc:resources mapping="/UserFiles/**" location="/UserFiles/"/>
  <mvc:resources mapping="/connectors/**" location="/connectors/"/>
  <mvc:resources mapping="/fckeditor/**" location="/fckeditor/"/>
  <!-- 
  Configures support for @Controllers 
  相当于注册了DefaultAnnotationHandlerMapping
  和AnnotationMethodHandlerAdapter两个bean，配置一些messageconverter。即解决了@Controller注解的使用前提配置。
  如果不用这个，则要声明下面2个bean
  <mvc:annotation-driven />
    -->
      <!-- 存储区域设置信息 -->
    <bean id="localeResolver"
        class="org.springframework.web.servlet.i18n.SessionLocaleResolver" />

    <!-- 拦截器注册 -->
    <bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
        <property name="basename" value="classpath:messages"/>
    </bean>

    <mvc:interceptors>
        <bean id="localeChangeInterceptor"
            class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor">
            <property name="paramName" value="lang" />
        </bean>
    </mvc:interceptors>

  <!-- jsp视图 -->
  <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
    <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
    <property name="prefix" value="/WEB-INF/webapp/" />
    <property name="suffix" value=".jsp" />
  </bean>
  
  <!-- JSON数据返回 -->
  <bean id="stringConverter" class="org.springframework.http.converter.StringHttpMessageConverter">
        <property name="supportedMediaTypes">
            <list>
                <value>text/plain;charset=UTF-8</value>
            </list>
        </property>
    </bean>
  <bean id="jsonConverter" class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter"></bean>
    <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
        <property name="messageConverters">
            <list>
                <ref bean="stringConverter"/>
                <ref bean="jsonConverter" />
            </list>
        </property>
    </bean>
  <!--开发期间注释掉，上线后启用 错误解析器 发生错误默认会跳转到/web-inf/views/timeout.jsp -->
  <bean id="exceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver"> 
    <property name="defaultErrorView" value="/commons/exception" /> 
    <property name="exceptionMappings"> 
      <props> 
        <prop key="java.lang.Exception">/commons/exception</prop>
      </props>
    </property>
  </bean>
  <!-- 文件上传 -->
  <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
    <!-- 解析request的编码 ，Default is ISO-8859-1 -->
    <property name="defaultEncoding" value="UTF-8" />
    <!-- 设置最大允许的大小(字节)。-1表示没有限制(默认) 1024*1024*10=10MB -->
    <property name="maxUploadSize" value="1048576000" />
    <!--被允许的最大的内存的大小，Default is 10240 bytes -->
    <property name="maxInMemorySize" value="20480" />
    <!-- 一个类似懒加载的属性.可以定义该属性.让解析文件的时候再抛异常,然后Controller中定义异常处理的方法 -->
    <property name="resolveLazily" value="true" />
  </bean>

</beans>