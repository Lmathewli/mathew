<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:context="http://www.springframework.org/schema/context"
  xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
  xsi:schemaLocation="
  http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
  http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd  
  http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
  http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
  http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd"
  default-lazy-init="true">

  <!-- 自动搜索@Component , @Service , @Repository等标注的类 不搜索@Controller的类 -->
  <!-- 自动扫描组件，这里要把web下面的 controller去除，他们是在spring3-servlet.xml中配置的，如果不去除会影响事务管理的。 -->
  <context:component-scan base-package="com.mathew" annotation-config="true"/>
  <context:component-scan base-package="com.mathew.scheduler" annotation-config="true"/>
  <context:component-scan base-package="com.mathew.security" annotation-config="true"/>
  <!-- enable autowire -->
  <context:annotation-config />
  <!-- service层的属性和配置文件读入 ,多个用逗号隔开 -->
  <!-- controller层的属性和配置文件读入 ,多个用逗号隔开-->
  <context:property-placeholder location="classpath:/config/jdbc.properties" />

  <!-- 用于持有ApplicationContext,可以使用SpringContextHolder.getBean('xxxx')的静态方法得到spring bean对象 -->
  <bean class="com.sf.spring.mvc.SpringContextHolder" lazy-init="true" />
  <!-- 数据源
  <bean id="sfDataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
    <property name="driverClassName"><value>org.logicalcobwebs.proxool.ProxoolDriver</value></property>
    <property name="url"><value>proxool.Pool_dbname</value></property>
  </bean>
  -->
  <!-- 数据连接事务 -->
  <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
    <property name="dataSource" ref="sfDataSource_ex" />
  </bean>
  <!-- 定义拦截器，用来指定事物属性，级别，和异常处理 -->
    <bean id="transactionInterceptor" class="org.springframework.transaction.interceptor.TransactionInterceptor">  
        <property name="transactionManager" ref="transactionManager"></property>
        <property name="transactionAttributes">
            <props>
                <!-- PROPAGATION_SUPPORTS:  如果已经存在事务,则加入事务;如果没有事务,则以非事务的方式执行;
                PROPAGATION_MANDATORY:  使用当前事务, 如果没有, 则抛出异常;
                PROPAGATION_REQUIRED:  新建事务,如果当前有事务, 则挂起; P
                ROPAGATION_NOT_SUPPORTED: 以非事务的方式执行, 如果当前有事务, 则挂起;
                PROPAGATION_NEVER: 以非事务的方式执行, 如果当前有事务,则抛出异常;
                +/-Exception</prop> + 表示异常出现时事物提交 - 表示异常出现时事务回滚 -->
                <prop key="find*">PROPAGATION_SUPPORTS,readOnly</prop>
                <prop key="count*">PROPAGATION_SUPPORTS,readOnly</prop>
                <prop key="get*">PROPAGATION_SUPPORTS,readOnly</prop>
                <prop key="select*">PROPAGATION_SUPPORTS,readOnly</prop>
                <prop key="del*"> PROPAGATION_SUPPORTS</prop> 
                <prop key="update*">PROPAGATION_REQUIRED</prop>
                <prop key="save*">PROPAGATION_REQUIRED,-Exception</prop>
                <prop key="valid*">PROPAGATION_REQUIRED,-Exception</prop>
                <prop key="insert*">PROPAGATION_REQUIRED,-Exception</prop>
            </props>
        </property>
    </bean>  
    <!-- 用来定义那些类需要采用事物管理 spring 事物的动态代理类 BeanNameAutoProxyCreator 根据类名自动代理，接受表达式 -->  
    <bean id="BeanProxy" class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
        <property name="beanNames">
            <!-- 对类名以Service结尾的类进行代理 -->
            <value>*Service</value>
        </property>
        <!-- 对代理类进行加载拦截器(实现通知的过程) -->
        <property name="interceptorNames">
            <list>
                <value>transactionInterceptor</value>
            </list>
        </property>
    </bean>

  <!-- define the SqlSessionFactory -->
  <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    <property name="dataSource" ref="sfDataSource_ex" />
    <property name="configLocation" value="classpath:/config/mybatis/mybatis-config.xml" />
    <property name="typeAliasesPackage" value="com.sf.mybatis.pojo" />
  </bean>
  <!-- JdbcTemplate配置 -->
  <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate"> 
    <property name="dataSource"> <ref bean="sfDataSource_ex"/> </property>
  </bean>
  <!-- 
  <bean id="tuxiaoerSpringAop" class="com.sf.spring.aop.TuxiaoerSpringAop"/>
  <aop:config>
    <aop:aspect id="logAspect" ref="tuxiaoerSpringAop">
      <aop:pointcut id="aopLogPoint"
        expression="
         execution(* com.sf.tuxiaoer.service..*.*del*(..)) || 
         execution(* com.sf.tuxiaoer.service..*.*save*(..)) || 
         execution(* com.sf.tuxiaoer.service..*.*insert*(..)) || 
         execution(* com.sf.tuxiaoer.service..*.*update*(..)) " />
      <aop:around pointcut-ref="aopLogPoint" method="invoke" />
      
    </aop:aspect>
  </aop:config>
   -->
  <!-- mybatis接口 -->
  <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
    <property name="basePackage" value="com.sf.mybatis.dao" />
  </bean>
  <!-- 连接事务的注解配置 -->
  <tx:annotation-driven transaction-manager="transactionManager" />
  <!--
  <import resource="classpath:/config/spring/spring-scheduler.xml" />
  -->
  <!-- 数据库连接池-->
  <import resource="classpath:/config/spring/spring-dataSource.xml" />
  <!-- jdbcTemplate使用的是 C3P0数据源 -->
  <bean id="sfJdbcTemplate" class="com.sf.spring.SFjdbcTemplate"> 
    <property name="dataSource"> <ref bean="sfDataSource_ex"/> </property>
  </bean>
   <bean id="dwrService" class="com.sf.tuxiaoer.service.imp.DwrServiceImpl"/>
   <!--   <import resource="classpath:/config/spring/spring-security.xml" /> -->
</beans>